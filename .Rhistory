`wine.(1)` <- read.csv("C:/Users/Melih/Downloads/wine (1).zip", sep="")
View(`wine.(1)`)
wine <- read.csv("C:/Users/Melih/Desktop/wine.data", header=FALSE)
View(wine)
wine <- read.table("C:/Users/Melih/Desktop/wine.names", quote="\"")
View(`wine.(1)`)
View(wine)
View(wine)
View(wine)
library(dplyr)
starwars
library(dplyr)
starwars
library(dplyr)
iris %>% select(Sepal.Length, Sepal.Width,Petal.Length)slice(1:20) %>%
library(dplyr)
starwars
library(dplyr)
iris
library(dplyr)
iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
library(dplyr)
iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
library(dplyr)
iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
winequality.red <- read.csv("C:/Users/Melih/Desktop/winequality-red.csv", sep=";")
View(winequality.red)
---
title: "Preprocessing"
#remove.packages("WDI")
install.packages("WDI",repos = "http://cran.us.r-project.org",dependencies=TRUE,eval=FALSE)
library(WDI)
#remove.packages("remotes")
install.packages("remotes",repos = "http://cran.us.r-project.org",dependencies=TRUE,eval=FALSE)
library(remotes)
install_github('vincentarelbundock/WDI')
indicator_codes <- c("SP.POP.TOTL","NY.GDP.PCAP.CD","SP.POP.DPND","FP.CPI.TOTL.ZG","SL.UEM.TOTL.ZS","SL.TLF.CACT.FE.ZS","SL.TLF.CACT.MA.ZS")
countries <- c("TUR", "USA")
start_date <- 2018
end_date <- 2023
world_bank_data_2 <- WDI( indicator = indicator_codes,
country = countries,
start = start_date,
end = end_date,
extra = TRUE)
world_bank_data_summary <- world_bank_data_2[,c("country","year","SP.POP.TOTL","NY.GDP.PCAP.CD","SP.POP.DPND","FP.CPI.TOTL.ZG","SL.UEM.TOTL.ZS","SL.TLF.CACT.FE.ZS","SL.TLF.CACT.MA.ZS")]
colnames(world_bank_data_summary) <- c("Country","Year","Population","GdpPerCapita","AgeDependancyRatio","Inflation","UnemploymentRate","FemaleLaborRate","MaleLaborRate")
world_bank_data_summary
saveRDS(world_bank_data_summary, file = "world_bank_data.rds")
loaded_data <- readRDS("world_bank_data.rds")
loaded_data
---
title: "Assignment: Shiny"
---
title: "Assignment: Shiny"
new library(shiny)
new library(shiny)
shiny::runApp('~/assigment')
runApp('~/assigment')
runApp('~/assigment')
pti <- c("shiny","tidyverse","ggplot2movies")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
​
pti <- c("shiny","tidyverse","ggplot2movies")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2movies)
# Set randomness seed
set.seed(61)
# Prepare data
shiny_movie_set <-
movies %>%
filter(year >= 2000) %>%
select(title,year,length,rating,votes,Action:Short) %>%
gather(genre,value,Action:Short) %>%
filter(value == 1) %>%
select(-value)
# Get genre list
genres <-
shiny_movie_set %>%
distinct(genre) %>%
unlist(.)
names(genres) <- NULL
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("year","Year Filter",min=min(shiny_movie_set$year),max=max(shiny_movie_set$year),value=c(2002,2004),step=1,sep=""),
selectInput("genre","Genre",choices = c("All",genres),selected="All",multiple = TRUE),
sliderInput("votes","At least X votes",min=0,max=max(shiny_movie_set$votes),value=0)
),
mainPanel(plotOutput("movie_plot"))
)
)
server <- function(input,output){
output$movie_plot <- renderPlot({
my_df <- shiny_movie_set %>%
filter(year >= input$year[1] & year <= input$year[2] & votes >=input$votes)
print(input$genre)
if (!("All" %in% input$genre)){
my_df <- my_df %>%
filter(genre %in% input$genre)
}
ggplot(my_df,aes(x=length,y=rating,color=genre)) +
geom_point() +
labs(title="IMDB Movies")
})
}
shiny::shinyApp(ui,server)
?diamonds
data.frame(diamonds)
data.frame(movies)
?diamonds
data.frame(diamonds)
?gather
shiny::shinyApp(ui,server)
?diamonds
shiny::shinyApp(ui,server)
# Get genre list
genres <-
shiny_movie_set %>%
distinct(genre) %>%
names(genres) <- NULL
# Get genre list
genres <-
shiny_movie_set %>%
distinct(genre) %>%
unlist(.)
names(genres) <- NULL
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("year","Year Filter",min=min(shiny_movie_set$year),max=max(shiny_movie_set$year),value=c(2002,2004),step=1,sep=""),
selectInput("genre","Genre",choices = c("All",genres),selected="All",multiple = TRUE),
sliderInput("votes","At least X votes",min=0,max=max(shiny_movie_set$votes),value=0)
),
mainPanel(plotOutput("movie_plot"))
)
)
shiny::shinyApp(ui,server)
shiny::shinyApp(ui,server)
# Get genre list
genres <-
shiny_movie_set %>%
distinct(genre) %>%
unlist(.)
# Get genre list
genres <-
shiny_movie_set %>%
distinct(genre) %>%
names(genres) <- NULL
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("year","Year Filter",min=min(shiny_movie_set$year),max=max(shiny_movie_set$year),value=c(2002,2004),step=1,sep=""),
selectInput("genre","Genre",choices = c("All",genres),selected="All",multiple = TRUE),
sliderInput("votes","At least X votes",min=0,max=max(shiny_movie_set$votes),value=0)
),
mainPanel(plotOutput("movie_plot"))
)
)
shiny::shinyApp(ui,server)
shiny::shinyApp(ui,server)
shiny::shinyApp(ui,server)
shiny::shinyApp(ui,server)
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
pti <- c("shiny","tidyverse","ggplot2movies")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2movies)
print (movies)
pti <- c("shiny","tidyverse","ggplot2movies")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2movies)
movies
myData = read.csv("C:\Users\Melih\Desktop\Yeni klasör\winequalityN.csv")
myData = read.csv("C:/Users/Melih/Desktop/Yeni klasör/winequalityN.csv")
myData
pti <- c("shiny","tidyverse","ggplot2")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2m)
pti <- c("shiny","tidyverse","ggplot2")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2)
myData = read.csv("C:/Users/Melih/Desktop/Yeni klasör/winequalityN.csv")
myData
myData
myData
print myData
print (myData)
View(myData)
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
myData <- read.csv("www/winequalityN.csv")
myData
myData <- read.csv("www/winequalityN.csv")
myData
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('C:/Users/Melih/Desktop/melih_diamonds.R')
runApp('app/melih_wine.R')
runApp('app/melih_wine.R')
myData <- read.csv("https://drive.google.com/file/d/1PQmc0xtmzdMKHMtXoFzHzaIznfLPD3tn/view?usp=drive_link")
myData
pti <- c("shiny", "tidyverse", "ggplot2")
pti <- pti[!(pti %in% installed.packages()[,"Package"])]
if(length(pti) > 0) {
install.packages(pti)
}
##########
### Shiny starter code
##########
library(shiny)
library(tidyverse)
library(ggplot2)
myData <- read.csv("https://drive.google.com/file/d/1PQmc0xtmzdMKHMtXoFzHzaIznfLPD3tn/view?usp=drive_link")
myData
ui <- fluidPage(
titlePanel("Wine Quality Explorer"),
sidebarLayout(
sidebarPanel(
sliderInput("quality_range", "Select Quality Range", min = 1, max = 10, value = c(5, 8))
),
mainPanel(
plotOutput("winePlot")
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
filter(myData, quality >= input$quality_range[1] & quality <= input$quality_range[2])
})
output$winePlot <- renderPlot({
ggplot(filtered_data(), aes(x = alcohol, y = pH, color = factor(quality))) +
geom_point() +
labs(title = "Wine Quality Scatter Plot", x = "Alcohol Content", y = "pH Level")
})
}
shinyApp(ui, server)
myData <- read.csv("https://drive.google.com/uc?id=1PQmc0xtmzdMKHMtXoFzHzaIznfLPD3tn")
myData
id <- "1PQmc0xtmzdMKHMtXoFzHzaIznfLPD3tn"
myData <- read.csv("https://drive.google.com/uc?id=1PQmc0xtmzdMKHMtXoFzHzaIznfLPD3tn")
myData
runApp('app/melih_wine.R')
runApp('app/melih_wine.R')
library(shiny); runApp('app/melih_wine.R')
runApp('app/melih_wine.R')
quarto preview
quarto preview
library(dplyr)
iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
library(dplyr)
head(iris %>%)
library(dplyr)
iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
head(iris)
library(dplyr)
versicolor %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
library(dplyr)
versicolor <- iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
head(versicolor)
library(dplyr)
azdrate <- iris %>%
mutate(azd = Petal.Length / ((Petal.Length / 50)^2)) %>%
arrange(desc(azd))
head(azdrate)
library(dplyr)
versicolor <- iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
head(versicolor,10)
library(dplyr)
azdrate <- iris %>%
mutate(azd = Petal.Length / ((Petal.Length / 50)^2)) %>%
arrange(desc(azd))
head(azdrate,10)
library(dplyr)
library(ggplot2)
wine_data <- read.csv("C:/Users/Melih/Documents/GitHub/mef07-meakgul/wine.csv")
head(wine_data)
library(dplyr)
versicolor<-iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
head(versicolo,10)
library(dplyr)
versicolor<-iris %>%
select(Species,Petal.Length ) %>% filter(Species=="versicolor")
head(versicolor,10)
library(dplyr)
azdrate<-iris %>%
mutate(azd = Petal.Length / ((Petal.Length / 50)^2)) %>%
arrange(desc(azd))
head(azdrate,10)
