[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Melih Can Akgul Progress Journal",
    "section": "",
    "text": "Introduction\n\nThis progress journal covers [STUDENT NAME SURNAME / PROJECT GROUP NAME]’s work during their term at BDA 503 Fall 2022.\nEach section is an assignment or an individual work."
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "1  Assignment 1",
    "section": "",
    "text": "2 About Me:\nHello, I’m Melih. I am currently working as a business analyst at Rimteks. I am carrying out a transformation project within the company. On the other hand, I create business continuity plans and follow workflows. We frequently use data sets when schematizing process plans and taking action. In these days when data sets are as valuable as gold for organizations, I aim to improve myself in making data sets useful and get involved in possible job positions. I believe that acting in the light of data science is the most reliable and definitive way.\nMy Linkedin Account\nRichard Vogg | Examples of simulated datasets that bring value to a data-driven company | RStudio\nIn this presentation, Richard Vogg talks about how he got help from business partners to use advanced techniques and what can be done to make a data project involving several teams more efficient. He states that what is required for these is that discrete independent operations on data sets can be made more effective when combined and that all tables are related on the way to the final table. He likens this plan to the small melodies in the choir aligning and combining to create a single, loud melody.\nIn addition, Richard Vogg mentions that a good data generator has the ability to create appropriate data quickly and efficiently, and states that R has many functions and packages that help simulate independent variables and create them in a meaningful way. In other words, it is said that R has the necessary instruments for the single, high melody in the chorus.\nThis data set includes chemical analysis results of wines belonging to three different classes. It is used to understand classification algorithms or learn data analysis techniques. A 13-dimensional dataset. Additionally, this dataset can also be used to apply classification or regression algorithms, perform data visualization, and evaluate model performance.\nWine Dataset"
  },
  {
    "objectID": "assignment1.html#pie-charts",
    "href": "assignment1.html#pie-charts",
    "title": "1  Assignment 1",
    "section": "5.1 Pie Charts",
    "text": "5.1 Pie Charts\nA pie chart is a circular graphical view of data.\nUse the pie() function to draw pie charts:\n\n# Create data for the graph.\ngeeks&lt;- c(23, 56, 20, 63)\nlabels &lt;- c(\"Mumbai\", \"Pune\", \"Chennai\", \"Bangalore\")\n \n# Plot the chart with title and rainbow \n# color pallet.\npie(geeks, labels, main = \"City pie chart\",\n            col = rainbow(length(geeks)))\n\n\n\n\nClick for Source"
  },
  {
    "objectID": "assignment1.html#r-matrices",
    "href": "assignment1.html#r-matrices",
    "title": "1  Assignment 1",
    "section": "5.2 R – Matrices",
    "text": "5.2 R – Matrices\nIn R programming, matrices are two-dimensional\n\n# R program to create a matrix\n  \nA = matrix(\n     \n  # Taking sequence of elements  \n  c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n   \n  # No of rows\n  nrow = 3,   \n   \n  # No of columns\n  ncol = 3,         \n   \n  # By default matrices are in column-wise order\n  # So this parameter decides how to arrange the matrix\n  byrow = TRUE         \n)\n  \n# Naming rows\nrownames(A) = c(\"a\", \"b\", \"c\")\n  \n# Naming columns\ncolnames(A) = c(\"c\", \"d\", \"e\")\n  \ncat(\"The 3x3 matrix:\\n\")\n\nThe 3x3 matrix:\n\nprint(A)\n\n  c d e\na 1 2 3\nb 4 5 6\nc 7 8 9\n\n\nClick for Source"
  },
  {
    "objectID": "assignment1.html#data-type",
    "href": "assignment1.html#data-type",
    "title": "1  Assignment 1",
    "section": "5.3 Data Type",
    "text": "5.3 Data Type\nFind data type of an object in R\n\n# A simple R program\n# to find data type of an object\n \n# Logical\nprint(class(TRUE))\n\n[1] \"logical\"\n\n# Integer\nprint(class(3L))\n\n[1] \"integer\"\n\n# Numeric\nprint(class(10.5))\n\n[1] \"numeric\"\n\n# Complex\nprint(class(1+2i))\n\n[1] \"complex\"\n\n# Character\nprint(class(\"12-04-2020\"))\n\n[1] \"character\"\n\n\nClick for Source"
  },
  {
    "objectID": "inClass1.html",
    "href": "inClass1.html",
    "title": "2  Inclass1",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\niris %&gt;%\n  select(Species,Petal.Length ) %&gt;% filter(Species==\"versicolor\")\n\n      Species Petal.Length\n1  versicolor          4.7\n2  versicolor          4.5\n3  versicolor          4.9\n4  versicolor          4.0\n5  versicolor          4.6\n6  versicolor          4.5\n7  versicolor          4.7\n8  versicolor          3.3\n9  versicolor          4.6\n10 versicolor          3.9\n11 versicolor          3.5\n12 versicolor          4.2\n13 versicolor          4.0\n14 versicolor          4.7\n15 versicolor          3.6\n16 versicolor          4.4\n17 versicolor          4.5\n18 versicolor          4.1\n19 versicolor          4.5\n20 versicolor          3.9\n21 versicolor          4.8\n22 versicolor          4.0\n23 versicolor          4.9\n24 versicolor          4.7\n25 versicolor          4.3\n26 versicolor          4.4\n27 versicolor          4.8\n28 versicolor          5.0\n29 versicolor          4.5\n30 versicolor          3.5\n31 versicolor          3.8\n32 versicolor          3.7\n33 versicolor          3.9\n34 versicolor          5.1\n35 versicolor          4.5\n36 versicolor          4.5\n37 versicolor          4.7\n38 versicolor          4.4\n39 versicolor          4.1\n40 versicolor          4.0\n41 versicolor          4.4\n42 versicolor          4.6\n43 versicolor          4.0\n44 versicolor          3.3\n45 versicolor          4.2\n46 versicolor          4.2\n47 versicolor          4.2\n48 versicolor          4.3\n49 versicolor          3.0\n50 versicolor          4.1\n\n\n\nlibrary(dplyr)\niris %&gt;%\n   mutate(azd = Petal.Length / ((Petal.Length / 50)^2)) %&gt;%\n    arrange(desc(azd))\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species       azd\n1            4.6         3.6          1.0         0.2     setosa 2500.0000\n2            4.3         3.0          1.1         0.1     setosa 2272.7273\n3            5.8         4.0          1.2         0.2     setosa 2083.3333\n4            5.0         3.2          1.2         0.2     setosa 2083.3333\n5            4.7         3.2          1.3         0.2     setosa 1923.0769\n6            5.4         3.9          1.3         0.4     setosa 1923.0769\n7            5.5         3.5          1.3         0.2     setosa 1923.0769\n8            4.4         3.0          1.3         0.2     setosa 1923.0769\n9            5.0         3.5          1.3         0.3     setosa 1923.0769\n10           4.5         2.3          1.3         0.3     setosa 1923.0769\n11           4.4         3.2          1.3         0.2     setosa 1923.0769\n12           5.1         3.5          1.4         0.2     setosa 1785.7143\n13           4.9         3.0          1.4         0.2     setosa 1785.7143\n14           5.0         3.6          1.4         0.2     setosa 1785.7143\n15           4.6         3.4          1.4         0.3     setosa 1785.7143\n16           4.4         2.9          1.4         0.2     setosa 1785.7143\n17           4.8         3.0          1.4         0.1     setosa 1785.7143\n18           5.1         3.5          1.4         0.3     setosa 1785.7143\n19           5.2         3.4          1.4         0.2     setosa 1785.7143\n20           5.5         4.2          1.4         0.2     setosa 1785.7143\n21           4.9         3.6          1.4         0.1     setosa 1785.7143\n22           4.8         3.0          1.4         0.3     setosa 1785.7143\n23           4.6         3.2          1.4         0.2     setosa 1785.7143\n24           5.0         3.3          1.4         0.2     setosa 1785.7143\n25           4.6         3.1          1.5         0.2     setosa 1666.6667\n26           5.0         3.4          1.5         0.2     setosa 1666.6667\n27           4.9         3.1          1.5         0.1     setosa 1666.6667\n28           5.4         3.7          1.5         0.2     setosa 1666.6667\n29           5.7         4.4          1.5         0.4     setosa 1666.6667\n30           5.1         3.8          1.5         0.3     setosa 1666.6667\n31           5.1         3.7          1.5         0.4     setosa 1666.6667\n32           5.2         3.5          1.5         0.2     setosa 1666.6667\n33           5.4         3.4          1.5         0.4     setosa 1666.6667\n34           5.2         4.1          1.5         0.1     setosa 1666.6667\n35           4.9         3.1          1.5         0.2     setosa 1666.6667\n36           5.1         3.4          1.5         0.2     setosa 1666.6667\n37           5.3         3.7          1.5         0.2     setosa 1666.6667\n38           4.8         3.4          1.6         0.2     setosa 1562.5000\n39           5.0         3.0          1.6         0.2     setosa 1562.5000\n40           5.0         3.4          1.6         0.4     setosa 1562.5000\n41           4.7         3.2          1.6         0.2     setosa 1562.5000\n42           4.8         3.1          1.6         0.2     setosa 1562.5000\n43           5.0         3.5          1.6         0.6     setosa 1562.5000\n44           5.1         3.8          1.6         0.2     setosa 1562.5000\n45           5.4         3.9          1.7         0.4     setosa 1470.5882\n46           5.7         3.8          1.7         0.3     setosa 1470.5882\n47           5.4         3.4          1.7         0.2     setosa 1470.5882\n48           5.1         3.3          1.7         0.5     setosa 1470.5882\n49           4.8         3.4          1.9         0.2     setosa 1315.7895\n50           5.1         3.8          1.9         0.4     setosa 1315.7895\n51           5.1         2.5          3.0         1.1 versicolor  833.3333\n52           4.9         2.4          3.3         1.0 versicolor  757.5758\n53           5.0         2.3          3.3         1.0 versicolor  757.5758\n54           5.0         2.0          3.5         1.0 versicolor  714.2857\n55           5.7         2.6          3.5         1.0 versicolor  714.2857\n56           5.6         2.9          3.6         1.3 versicolor  694.4444\n57           5.5         2.4          3.7         1.0 versicolor  675.6757\n58           5.5         2.4          3.8         1.1 versicolor  657.8947\n59           5.2         2.7          3.9         1.4 versicolor  641.0256\n60           5.6         2.5          3.9         1.1 versicolor  641.0256\n61           5.8         2.7          3.9         1.2 versicolor  641.0256\n62           5.5         2.3          4.0         1.3 versicolor  625.0000\n63           6.0         2.2          4.0         1.0 versicolor  625.0000\n64           6.1         2.8          4.0         1.3 versicolor  625.0000\n65           5.5         2.5          4.0         1.3 versicolor  625.0000\n66           5.8         2.6          4.0         1.2 versicolor  625.0000\n67           5.8         2.7          4.1         1.0 versicolor  609.7561\n68           5.6         3.0          4.1         1.3 versicolor  609.7561\n69           5.7         2.8          4.1         1.3 versicolor  609.7561\n70           5.9         3.0          4.2         1.5 versicolor  595.2381\n71           5.6         2.7          4.2         1.3 versicolor  595.2381\n72           5.7         3.0          4.2         1.2 versicolor  595.2381\n73           5.7         2.9          4.2         1.3 versicolor  595.2381\n74           6.4         2.9          4.3         1.3 versicolor  581.3953\n75           6.2         2.9          4.3         1.3 versicolor  581.3953\n76           6.7         3.1          4.4         1.4 versicolor  568.1818\n77           6.6         3.0          4.4         1.4 versicolor  568.1818\n78           6.3         2.3          4.4         1.3 versicolor  568.1818\n79           5.5         2.6          4.4         1.2 versicolor  568.1818\n80           6.4         3.2          4.5         1.5 versicolor  555.5556\n81           5.7         2.8          4.5         1.3 versicolor  555.5556\n82           5.6         3.0          4.5         1.5 versicolor  555.5556\n83           6.2         2.2          4.5         1.5 versicolor  555.5556\n84           6.0         2.9          4.5         1.5 versicolor  555.5556\n85           5.4         3.0          4.5         1.5 versicolor  555.5556\n86           6.0         3.4          4.5         1.6 versicolor  555.5556\n87           4.9         2.5          4.5         1.7  virginica  555.5556\n88           6.5         2.8          4.6         1.5 versicolor  543.4783\n89           6.6         2.9          4.6         1.3 versicolor  543.4783\n90           6.1         3.0          4.6         1.4 versicolor  543.4783\n91           7.0         3.2          4.7         1.4 versicolor  531.9149\n92           6.3         3.3          4.7         1.6 versicolor  531.9149\n93           6.1         2.9          4.7         1.4 versicolor  531.9149\n94           6.1         2.8          4.7         1.2 versicolor  531.9149\n95           6.7         3.1          4.7         1.5 versicolor  531.9149\n96           5.9         3.2          4.8         1.8 versicolor  520.8333\n97           6.8         2.8          4.8         1.4 versicolor  520.8333\n98           6.2         2.8          4.8         1.8  virginica  520.8333\n99           6.0         3.0          4.8         1.8  virginica  520.8333\n100          6.9         3.1          4.9         1.5 versicolor  510.2041\n101          6.3         2.5          4.9         1.5 versicolor  510.2041\n102          5.6         2.8          4.9         2.0  virginica  510.2041\n103          6.3         2.7          4.9         1.8  virginica  510.2041\n104          6.1         3.0          4.9         1.8  virginica  510.2041\n105          6.7         3.0          5.0         1.7 versicolor  500.0000\n106          5.7         2.5          5.0         2.0  virginica  500.0000\n107          6.0         2.2          5.0         1.5  virginica  500.0000\n108          6.3         2.5          5.0         1.9  virginica  500.0000\n109          6.0         2.7          5.1         1.6 versicolor  490.1961\n110          5.8         2.7          5.1         1.9  virginica  490.1961\n111          6.5         3.2          5.1         2.0  virginica  490.1961\n112          5.8         2.8          5.1         2.4  virginica  490.1961\n113          6.3         2.8          5.1         1.5  virginica  490.1961\n114          6.9         3.1          5.1         2.3  virginica  490.1961\n115          5.8         2.7          5.1         1.9  virginica  490.1961\n116          5.9         3.0          5.1         1.8  virginica  490.1961\n117          6.7         3.0          5.2         2.3  virginica  480.7692\n118          6.5         3.0          5.2         2.0  virginica  480.7692\n119          6.4         2.7          5.3         1.9  virginica  471.6981\n120          6.4         3.2          5.3         2.3  virginica  471.6981\n121          6.9         3.1          5.4         2.1  virginica  462.9630\n122          6.2         3.4          5.4         2.3  virginica  462.9630\n123          6.8         3.0          5.5         2.1  virginica  454.5455\n124          6.5         3.0          5.5         1.8  virginica  454.5455\n125          6.4         3.1          5.5         1.8  virginica  454.5455\n126          6.3         2.9          5.6         1.8  virginica  446.4286\n127          6.4         2.8          5.6         2.1  virginica  446.4286\n128          6.4         2.8          5.6         2.2  virginica  446.4286\n129          6.1         2.6          5.6         1.4  virginica  446.4286\n130          6.3         3.4          5.6         2.4  virginica  446.4286\n131          6.7         3.1          5.6         2.4  virginica  446.4286\n132          6.9         3.2          5.7         2.3  virginica  438.5965\n133          6.7         3.3          5.7         2.1  virginica  438.5965\n134          6.7         3.3          5.7         2.5  virginica  438.5965\n135          6.5         3.0          5.8         2.2  virginica  431.0345\n136          6.7         2.5          5.8         1.8  virginica  431.0345\n137          7.2         3.0          5.8         1.6  virginica  431.0345\n138          7.1         3.0          5.9         2.1  virginica  423.7288\n139          6.8         3.2          5.9         2.3  virginica  423.7288\n140          6.3         3.3          6.0         2.5  virginica  416.6667\n141          7.2         3.2          6.0         1.8  virginica  416.6667\n142          7.2         3.6          6.1         2.5  virginica  409.8361\n143          7.4         2.8          6.1         1.9  virginica  409.8361\n144          7.7         3.0          6.1         2.3  virginica  409.8361\n145          7.3         2.9          6.3         1.8  virginica  396.8254\n146          7.9         3.8          6.4         2.0  virginica  390.6250\n147          7.6         3.0          6.6         2.1  virginica  378.7879\n148          7.7         3.8          6.7         2.2  virginica  373.1343\n149          7.7         2.8          6.7         2.0  virginica  373.1343\n150          7.7         2.6          6.9         2.3  virginica  362.3188"
  },
  {
    "objectID": "inClass1.html#pie-charts",
    "href": "inClass1.html#pie-charts",
    "title": "2  Assignment 1",
    "section": "6.1 Pie Charts",
    "text": "6.1 Pie Charts\nA pie chart is a circular graphical view of data.\nUse the pie() function to draw pie charts:\n\n# Create data for the graph.\ngeeks&lt;- c(23, 56, 20, 63)\nlabels &lt;- c(\"Mumbai\", \"Pune\", \"Chennai\", \"Bangalore\")\n \n# Plot the chart with title and rainbow \n# color pallet.\npie(geeks, labels, main = \"City pie chart\",\n            col = rainbow(length(geeks)))\n\n\n\n\nClick for Source"
  },
  {
    "objectID": "inClass1.html#r-matrices",
    "href": "inClass1.html#r-matrices",
    "title": "2  Assignment 1",
    "section": "6.2 R – Matrices",
    "text": "6.2 R – Matrices\nIn R programming, matrices are two-dimensional\n\n# R program to create a matrix\n  \nA = matrix(\n     \n  # Taking sequence of elements  \n  c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n   \n  # No of rows\n  nrow = 3,   \n   \n  # No of columns\n  ncol = 3,         \n   \n  # By default matrices are in column-wise order\n  # So this parameter decides how to arrange the matrix\n  byrow = TRUE         \n)\n  \n# Naming rows\nrownames(A) = c(\"a\", \"b\", \"c\")\n  \n# Naming columns\ncolnames(A) = c(\"c\", \"d\", \"e\")\n  \ncat(\"The 3x3 matrix:\\n\")\n\nThe 3x3 matrix:\n\nprint(A)\n\n  c d e\na 1 2 3\nb 4 5 6\nc 7 8 9\n\n\nClick for Source"
  },
  {
    "objectID": "inClass1.html#data-type",
    "href": "inClass1.html#data-type",
    "title": "2  Assignment 1",
    "section": "6.3 Data Type",
    "text": "6.3 Data Type\nFind data type of an object in R\n\n# A simple R program\n# to find data type of an object\n \n# Logical\nprint(class(TRUE))\n\n[1] \"logical\"\n\n# Integer\nprint(class(3L))\n\n[1] \"integer\"\n\n# Numeric\nprint(class(10.5))\n\n[1] \"numeric\"\n\n# Complex\nprint(class(1+2i))\n\n[1] \"complex\"\n\n# Character\nprint(class(\"12-04-2020\"))\n\n[1] \"character\"\n\n\nClick for Source"
  },
  {
    "objectID": "assignment_shiny.html#shiny-app-wine-quality-explorer",
    "href": "assignment_shiny.html#shiny-app-wine-quality-explorer",
    "title": "3  Assignment: Shiny",
    "section": "3.1 Shiny App: Wine Quality Explorer",
    "text": "3.1 Shiny App: Wine Quality Explorer\nYou can run my shiny app using the following command."
  }
]